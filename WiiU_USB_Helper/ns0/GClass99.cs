using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;

namespace ns0
{
	// Token: 0x02000105 RID: 261
	public sealed class GClass99 : IDisposable
	{
		// Token: 0x17000187 RID: 391
		// (get) Token: 0x06000705 RID: 1797 RVA: 0x00014A55 File Offset: 0x00012C55
		// (set) Token: 0x06000706 RID: 1798 RVA: 0x00014A5D File Offset: 0x00012C5D
		public ushort NumOfDlc { get; set; }

		// Token: 0x17000188 RID: 392
		// (get) Token: 0x06000707 RID: 1799 RVA: 0x00014A66 File Offset: 0x00012C66
		// (set) Token: 0x06000708 RID: 1800 RVA: 0x00014A6E File Offset: 0x00012C6E
		public ulong TicketId { get; set; }

		// Token: 0x17000189 RID: 393
		// (get) Token: 0x06000709 RID: 1801 RVA: 0x00014A77 File Offset: 0x00012C77
		// (set) Token: 0x0600070A RID: 1802 RVA: 0x00014A7F File Offset: 0x00012C7F
		public byte[] Byte_0
		{
			get
			{
				return this.byte_5;
			}
			set
			{
				this.byte_5 = value;
				this.TitleKeyChanged = true;
				this.bool_1 = false;
			}
		}

		// Token: 0x1700018A RID: 394
		// (get) Token: 0x0600070B RID: 1803 RVA: 0x00014A96 File Offset: 0x00012C96
		// (set) Token: 0x0600070C RID: 1804 RVA: 0x00014A9E File Offset: 0x00012C9E
		public bool TitleKeyChanged { get; private set; }

		// Token: 0x0600070D RID: 1805 RVA: 0x00014AA7 File Offset: 0x00012CA7
		public static byte[] smethod_0(string string_0, string string_1, int int_0)
		{
			return GClass99.smethod_3(string_0, string_1, int_0, GClass99.byte_2, false, false);
		}

		// Token: 0x0600070E RID: 1806 RVA: 0x00014AB8 File Offset: 0x00012CB8
		public static byte[] smethod_1(string string_0, string string_1, int int_0)
		{
			return GClass99.smethod_3(string_0, string_1, int_0, GClass99.byte_3, false, false);
		}

		// Token: 0x0600070F RID: 1807 RVA: 0x00014AC9 File Offset: 0x00012CC9
		public static byte[] smethod_2(string string_0, string string_1, int int_0, bool bool_3 = false, bool bool_4 = false)
		{
			return GClass99.smethod_3(string_0, string_1, int_0, GClass99.byte_1, bool_3, bool_4);
		}

		// Token: 0x06000710 RID: 1808 RVA: 0x000323BC File Offset: 0x000305BC
		private static byte[] smethod_3(string string_0, string string_1, int int_0, byte[] byte_18, bool bool_3 = false, bool bool_4 = false)
		{
			byte[] array = (byte[])byte_18.Clone();
			Array src = new byte[]
			{
				(byte)(int_0 >> 8),
				(byte)int_0
			};
			byte[] array2 = string_0.smethod_6();
			byte[] array3 = string_1.smethod_6();
			Buffer.BlockCopy(src, 0, array, 486, 2);
			Buffer.BlockCopy(array2, 0, array, 476, array2.Length);
			Buffer.BlockCopy(array3, 0, array, 447, array3.Length);
			if (bool_3)
			{
				GClass99.smethod_4(ref array);
			}
			if (bool_4)
			{
				GClass99.smethod_5(ref array);
			}
			return array;
		}

		// Token: 0x06000711 RID: 1809 RVA: 0x0003243C File Offset: 0x0003063C
		private static void smethod_4(ref byte[] byte_18)
		{
			for (int i = 0; i < 64; i++)
			{
				byte_18[228 + i] = 0;
			}
		}

		// Token: 0x06000712 RID: 1810 RVA: 0x00014ADB File Offset: 0x00012CDB
		private static void smethod_5(ref byte[] byte_18)
		{
			Buffer.BlockCopy(GClass99.byte_0, 0, byte_18, 676, GClass99.byte_0.Length);
		}

		// Token: 0x06000713 RID: 1811 RVA: 0x00014AF6 File Offset: 0x00012CF6
		public void Dispose()
		{
			this.method_0(true);
			GC.SuppressFinalize(this);
		}

		// Token: 0x06000714 RID: 1812 RVA: 0x00032464 File Offset: 0x00030664
		~GClass99()
		{
			this.method_0(false);
		}

		// Token: 0x06000715 RID: 1813 RVA: 0x00032494 File Offset: 0x00030694
		private void method_0(bool bool_3)
		{
			if (bool_3 && !this.bool_2)
			{
				this.byte_5 = null;
				this.byte_8 = null;
				this.byte_13 = null;
				this.byte_10 = null;
				this.byte_7 = null;
				this.byte_14 = null;
				this.byte_6 = null;
				this.byte_16 = null;
				this.byte_17 = null;
				this.byte_12 = null;
			}
			this.bool_2 = true;
		}

		// Token: 0x06000716 RID: 1814 RVA: 0x00014B05 File Offset: 0x00012D05
		public static GClass99 smethod_6(string string_0, GEnum3 genum3_0)
		{
			return GClass99.smethod_7(File.ReadAllBytes(string_0), genum3_0);
		}

		// Token: 0x06000717 RID: 1815 RVA: 0x000324FC File Offset: 0x000306FC
		public static GClass99 smethod_7(byte[] byte_18, GEnum3 genum3_0)
		{
			GClass99 gclass = new GClass99();
			MemoryStream memoryStream = new MemoryStream(byte_18);
			try
			{
				gclass.method_2(memoryStream, genum3_0);
			}
			catch
			{
				memoryStream.Dispose();
				throw;
			}
			memoryStream.Dispose();
			return gclass;
		}

		// Token: 0x06000718 RID: 1816 RVA: 0x00032540 File Offset: 0x00030740
		private void method_1(GEnum3 genum3_0)
		{
			byte[] key = GClass98.smethod_0(genum3_0);
			byte[] bytes = BitConverter.GetBytes(GClass27.smethod_6(this.ulong_1));
			Array.Resize<byte>(ref bytes, 16);
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			rijndaelManaged.Mode = CipherMode.CBC;
			rijndaelManaged.Padding = PaddingMode.None;
			rijndaelManaged.KeySize = 128;
			rijndaelManaged.BlockSize = 128;
			rijndaelManaged.Key = key;
			rijndaelManaged.IV = bytes;
			ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
			MemoryStream memoryStream = new MemoryStream(this.byte_6);
			CryptoStream cryptoStream = new CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Read);
			cryptoStream.Read(this.byte_5, 0, this.byte_5.Length);
			cryptoStream.Dispose();
			memoryStream.Dispose();
			cryptoTransform.Dispose();
			rijndaelManaged.Clear();
		}

		// Token: 0x06000719 RID: 1817 RVA: 0x000325EC File Offset: 0x000307EC
		private void method_2(Stream stream_0, GEnum3 genum3_0)
		{
			stream_0.Seek(0L, SeekOrigin.Begin);
			byte[] array = new byte[8];
			stream_0.Read(array, 0, 4);
			this.uint_2 = GClass27.smethod_5(BitConverter.ToUInt32(array, 0));
			stream_0.Read(this.byte_13, 0, this.byte_13.Length);
			stream_0.Read(this.byte_10, 0, this.byte_10.Length);
			stream_0.Read(this.byte_7, 0, this.byte_7.Length);
			stream_0.Read(this.byte_14, 0, this.byte_14.Length);
			stream_0.Read(this.byte_6, 0, this.byte_6.Length);
			this.byte_15 = (byte)stream_0.ReadByte();
			stream_0.Read(array, 0, 8);
			this.TicketId = GClass27.smethod_6(BitConverter.ToUInt64(array, 0));
			stream_0.Read(array, 0, 4);
			this.uint_0 = GClass27.smethod_5(BitConverter.ToUInt32(array, 0));
			stream_0.Read(array, 0, 8);
			this.ulong_1 = GClass27.smethod_6(BitConverter.ToUInt64(array, 0));
			stream_0.Read(array, 0, 4);
			this.ushort_2 = GClass27.smethod_4(BitConverter.ToUInt16(array, 0));
			this.NumOfDlc = GClass27.smethod_4(BitConverter.ToUInt16(array, 2));
			stream_0.Read(array, 0, 8);
			this.ulong_2 = GClass27.smethod_6(BitConverter.ToUInt64(array, 0));
			this.byte_11 = (byte)stream_0.ReadByte();
			this.byte_4 = (byte)stream_0.ReadByte();
			this.byte_9 = this.byte_4;
			stream_0.Read(this.byte_16, 0, this.byte_16.Length);
			stream_0.Read(this.byte_17, 0, this.byte_17.Length);
			stream_0.Read(array, 0, 2);
			this.ushort_1 = GClass27.smethod_4(BitConverter.ToUInt16(array, 0));
			stream_0.Read(array, 0, 8);
			this.uint_1 = GClass27.smethod_5(BitConverter.ToUInt32(array, 0));
			this.uint_3 = GClass27.smethod_5(BitConverter.ToUInt32(array, 4));
			stream_0.Read(this.byte_12, 0, this.byte_12.Length);
			this.method_1(genum3_0);
		}

		// Token: 0x0600071A RID: 1818 RVA: 0x00014B13 File Offset: 0x00012D13
		private void method_3(GEnum3 genum3_0)
		{
			this.byte_6 = this.byte_8;
			this.method_1(genum3_0);
		}

		// Token: 0x040003FC RID: 1020
		[CompilerGenerated]
		private ushort ushort_0;

		// Token: 0x040003FD RID: 1021
		[CompilerGenerated]
		private ulong ulong_0;

		// Token: 0x040003FE RID: 1022
		[CompilerGenerated]
		private bool bool_0;

		// Token: 0x040003FF RID: 1023
		private static readonly byte[] byte_0 = new byte[]
		{
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			172,
			0,
			0,
			0,
			20,
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			40,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			132,
			0,
			0,
			0,
			132,
			0,
			3,
			0,
			0,
			0,
			0,
			0,
			0,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000400 RID: 1024
		private static readonly byte[] byte_1 = new byte[]
		{
			0,
			1,
			0,
			4,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			209,
			94,
			165,
			237,
			21,
			171,
			225,
			26,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			82,
			111,
			111,
			116,
			45,
			67,
			65,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			51,
			45,
			88,
			83,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			99,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			1,
			0,
			0,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			170,
			170,
			170,
			170,
			170,
			170,
			170,
			170,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			172,
			0,
			0,
			0,
			20,
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			40,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			132,
			0,
			0,
			0,
			132,
			0,
			3,
			0,
			0,
			0,
			0,
			0,
			0,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000401 RID: 1025
		private static readonly byte[] byte_2 = new byte[]
		{
			0,
			1,
			0,
			4,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			209,
			94,
			165,
			224,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			82,
			111,
			111,
			116,
			45,
			67,
			65,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			51,
			45,
			88,
			83,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			99,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			254,
			237,
			250,
			206,
			1,
			0,
			0,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			204,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			170,
			170,
			170,
			170,
			170,
			170,
			170,
			170,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			172,
			0,
			0,
			0,
			20,
			0,
			1,
			0,
			20,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			40,
			0,
			0,
			0,
			1,
			0,
			0,
			0,
			132,
			0,
			0,
			0,
			132,
			0,
			3,
			0,
			0,
			0,
			0,
			0,
			0,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			4,
			145,
			158,
			190,
			70,
			74,
			208,
			245,
			82,
			205,
			27,
			114,
			231,
			136,
			73,
			16,
			207,
			85,
			169,
			240,
			46,
			80,
			120,
			150,
			65,
			216,
			150,
			104,
			61,
			192,
			5,
			189,
			10,
			234,
			135,
			7,
			157,
			138,
			194,
			132,
			198,
			117,
			6,
			95,
			116,
			200,
			191,
			55,
			200,
			128,
			68,
			64,
			149,
			2,
			160,
			34,
			152,
			11,
			184,
			173,
			72,
			56,
			63,
			109,
			40,
			167,
			157,
			227,
			150,
			38,
			204,
			178,
			178,
			42,
			15,
			25,
			228,
			16,
			50,
			240,
			148,
			179,
			159,
			240,
			19,
			49,
			70,
			222,
			200,
			246,
			193,
			169,
			213,
			92,
			210,
			141,
			158,
			28,
			71,
			179,
			209,
			31,
			79,
			84,
			38,
			194,
			199,
			128,
			19,
			90,
			39,
			117,
			211,
			202,
			103,
			155,
			199,
			232,
			52,
			240,
			224,
			251,
			88,
			230,
			136,
			96,
			167,
			19,
			48,
			252,
			149,
			121,
			23,
			147,
			200,
			251,
			169,
			53,
			167,
			166,
			144,
			143,
			34,
			157,
			238,
			42,
			12,
			166,
			185,
			178,
			59,
			18,
			212,
			149,
			166,
			254,
			25,
			208,
			215,
			38,
			72,
			33,
			104,
			120,
			96,
			90,
			102,
			83,
			141,
			191,
			55,
			104,
			153,
			144,
			93,
			52,
			69,
			252,
			92,
			114,
			122,
			14,
			19,
			224,
			226,
			200,
			151,
			28,
			156,
			250,
			108,
			96,
			103,
			136,
			117,
			115,
			42,
			78,
			117,
			82,
			61,
			47,
			86,
			47,
			18,
			170,
			189,
			21,
			115,
			191,
			6,
			201,
			64,
			84,
			174,
			250,
			129,
			167,
			20,
			23,
			175,
			154,
			74,
			6,
			109,
			15,
			252,
			90,
			214,
			75,
			171,
			40,
			177,
			byte.MaxValue,
			96,
			102,
			31,
			68,
			55,
			212,
			158,
			30,
			13,
			148,
			18,
			235,
			75,
			202,
			207,
			76,
			253,
			106,
			52,
			8,
			132,
			121,
			130,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			82,
			111,
			111,
			116,
			45,
			67,
			65,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			51,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			88,
			83,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			99,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			19,
			122,
			8,
			148,
			173,
			80,
			91,
			182,
			198,
			126,
			46,
			91,
			221,
			106,
			59,
			236,
			67,
			217,
			16,
			199,
			114,
			233,
			204,
			41,
			13,
			165,
			133,
			136,
			183,
			125,
			204,
			17,
			104,
			11,
			179,
			226,
			159,
			78,
			171,
			187,
			38,
			233,
			140,
			38,
			1,
			152,
			92,
			4,
			27,
			177,
			67,
			120,
			230,
			137,
			24,
			26,
			173,
			119,
			5,
			104,
			233,
			40,
			162,
			185,
			129,
			103,
			238,
			62,
			16,
			208,
			114,
			190,
			239,
			31,
			162,
			47,
			162,
			170,
			62,
			19,
			241,
			30,
			24,
			54,
			169,
			42,
			66,
			129,
			239,
			112,
			170,
			244,
			228,
			98,
			153,
			130,
			33,
			198,
			251,
			185,
			189,
			208,
			23,
			230,
			172,
			89,
			4,
			148,
			233,
			206,
			169,
			133,
			156,
			235,
			45,
			42,
			76,
			23,
			102,
			242,
			195,
			57,
			18,
			197,
			143,
			20,
			168,
			3,
			227,
			111,
			204,
			220,
			204,
			220,
			19,
			253,
			122,
			231,
			124,
			122,
			120,
			217,
			151,
			230,
			172,
			195,
			85,
			87,
			224,
			211,
			233,
			235,
			100,
			180,
			60,
			146,
			244,
			197,
			13,
			103,
			166,
			2,
			222,
			179,
			145,
			176,
			102,
			97,
			205,
			50,
			136,
			11,
			214,
			73,
			18,
			175,
			28,
			188,
			183,
			22,
			42,
			6,
			240,
			37,
			101,
			211,
			176,
			236,
			228,
			252,
			236,
			221,
			174,
			138,
			73,
			52,
			219,
			142,
			230,
			127,
			48,
			23,
			152,
			98,
			33,
			21,
			93,
			19,
			28,
			108,
			63,
			9,
			171,
			25,
			69,
			194,
			6,
			172,
			112,
			201,
			66,
			179,
			111,
			73,
			161,
			24,
			59,
			205,
			120,
			182,
			228,
			180,
			124,
			108,
			92,
			172,
			15,
			141,
			98,
			248,
			151,
			198,
			149,
			61,
			209,
			47,
			40,
			183,
			12,
			91,
			125,
			247,
			81,
			129,
			154,
			152,
			52,
			101,
			38,
			37,
			0,
			1,
			0,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			3,
			112,
			65,
			56,
			239,
			187,
			189,
			161,
			106,
			152,
			125,
			217,
			1,
			50,
			109,
			28,
			148,
			89,
			72,
			76,
			136,
			162,
			134,
			27,
			145,
			163,
			18,
			88,
			122,
			231,
			14,
			246,
			35,
			126,
			197,
			14,
			16,
			50,
			220,
			57,
			221,
			232,
			154,
			150,
			168,
			232,
			89,
			215,
			106,
			152,
			166,
			231,
			227,
			106,
			12,
			254,
			53,
			44,
			168,
			147,
			5,
			130,
			52,
			byte.MaxValue,
			131,
			63,
			203,
			59,
			3,
			129,
			30,
			159,
			13,
			192,
			217,
			165,
			47,
			128,
			69,
			180,
			178,
			249,
			65,
			27,
			103,
			165,
			28,
			68,
			181,
			239,
			140,
			231,
			123,
			214,
			213,
			107,
			167,
			87,
			52,
			161,
			133,
			109,
			230,
			212,
			190,
			214,
			211,
			162,
			66,
			199,
			200,
			121,
			27,
			52,
			34,
			55,
			94,
			92,
			119,
			154,
			191,
			7,
			47,
			118,
			149,
			239,
			160,
			247,
			91,
			203,
			131,
			120,
			159,
			195,
			14,
			63,
			228,
			204,
			131,
			146,
			32,
			120,
			64,
			99,
			137,
			73,
			199,
			246,
			136,
			86,
			95,
			100,
			155,
			116,
			214,
			61,
			141,
			88,
			byte.MaxValue,
			173,
			218,
			87,
			30,
			149,
			84,
			66,
			107,
			19,
			24,
			252,
			70,
			137,
			131,
			212,
			200,
			165,
			98,
			139,
			6,
			182,
			252,
			93,
			80,
			124,
			19,
			231,
			161,
			138,
			193,
			81,
			30,
			182,
			214,
			46,
			165,
			68,
			143,
			131,
			80,
			20,
			71,
			169,
			175,
			179,
			236,
			194,
			144,
			60,
			157,
			213,
			47,
			146,
			42,
			201,
			172,
			219,
			239,
			88,
			198,
			2,
			24,
			72,
			217,
			110,
			32,
			135,
			50,
			211,
			209,
			217,
			217,
			234,
			68,
			13,
			145,
			98,
			28,
			122,
			153,
			219,
			136,
			67,
			197,
			156,
			31,
			46,
			44,
			125,
			155,
			87,
			125,
			81,
			44,
			22,
			109,
			111,
			126,
			26,
			173,
			74,
			119,
			74,
			55,
			68,
			126,
			120,
			254,
			32,
			33,
			225,
			74,
			149,
			209,
			18,
			160,
			104,
			173,
			160,
			25,
			244,
			99,
			199,
			165,
			86,
			133,
			170,
			187,
			104,
			136,
			185,
			36,
			100,
			131,
			209,
			139,
			156,
			128,
			111,
			71,
			73,
			24,
			51,
			23,
			130,
			52,
			74,
			75,
			133,
			49,
			51,
			75,
			38,
			48,
			50,
			99,
			217,
			210,
			235,
			79,
			75,
			185,
			150,
			2,
			179,
			82,
			246,
			174,
			64,
			70,
			198,
			154,
			94,
			126,
			142,
			74,
			24,
			239,
			155,
			192,
			162,
			222,
			214,
			19,
			16,
			65,
			112,
			18,
			253,
			130,
			76,
			193,
			22,
			207,
			183,
			196,
			193,
			247,
			236,
			113,
			119,
			161,
			116,
			70,
			203,
			222,
			150,
			243,
			237,
			216,
			143,
			205,
			5,
			47,
			11,
			136,
			138,
			69,
			253,
			175,
			43,
			99,
			19,
			84,
			244,
			13,
			22,
			229,
			250,
			156,
			44,
			78,
			218,
			152,
			231,
			152,
			209,
			94,
			96,
			70,
			220,
			83,
			99,
			243,
			9,
			107,
			44,
			96,
			122,
			157,
			141,
			213,
			91,
			21,
			2,
			166,
			172,
			125,
			60,
			200,
			216,
			197,
			117,
			153,
			142,
			125,
			121,
			105,
			16,
			200,
			4,
			196,
			149,
			35,
			80,
			87,
			233,
			30,
			205,
			38,
			55,
			201,
			193,
			132,
			81,
			81,
			172,
			107,
			154,
			4,
			144,
			174,
			62,
			198,
			244,
			119,
			64,
			160,
			219,
			11,
			163,
			109,
			7,
			89,
			86,
			206,
			231,
			53,
			78,
			163,
			233,
			164,
			242,
			114,
			11,
			38,
			85,
			12,
			125,
			57,
			67,
			36,
			188,
			12,
			183,
			233,
			49,
			125,
			138,
			134,
			97,
			244,
			33,
			145,
			byte.MaxValue,
			16,
			176,
			130,
			86,
			206,
			63,
			210,
			91,
			116,
			94,
			81,
			148,
			144,
			107,
			77,
			97,
			203,
			76,
			46,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			82,
			111,
			111,
			116,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			1,
			67,
			65,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			51,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			123,
			232,
			239,
			108,
			178,
			121,
			201,
			226,
			238,
			225,
			33,
			198,
			234,
			244,
			79,
			246,
			57,
			248,
			143,
			7,
			139,
			75,
			119,
			237,
			159,
			149,
			96,
			176,
			53,
			130,
			129,
			181,
			14,
			85,
			171,
			114,
			17,
			21,
			161,
			119,
			112,
			60,
			122,
			48,
			254,
			58,
			233,
			239,
			28,
			96,
			188,
			29,
			151,
			70,
			118,
			178,
			58,
			104,
			204,
			4,
			177,
			152,
			82,
			91,
			201,
			104,
			241,
			29,
			226,
			219,
			80,
			228,
			217,
			231,
			240,
			113,
			229,
			98,
			218,
			226,
			9,
			34,
			51,
			233,
			211,
			99,
			246,
			29,
			215,
			193,
			159,
			243,
			164,
			169,
			30,
			143,
			101,
			83,
			212,
			113,
			221,
			123,
			132,
			185,
			241,
			184,
			206,
			115,
			53,
			240,
			245,
			84,
			5,
			99,
			161,
			234,
			184,
			57,
			99,
			224,
			155,
			233,
			1,
			1,
			31,
			153,
			84,
			99,
			97,
			40,
			112,
			32,
			233,
			204,
			13,
			171,
			72,
			127,
			20,
			13,
			102,
			38,
			161,
			131,
			109,
			39,
			17,
			31,
			32,
			104,
			222,
			71,
			114,
			20,
			145,
			81,
			207,
			105,
			198,
			27,
			166,
			14,
			249,
			217,
			73,
			160,
			247,
			31,
			84,
			153,
			242,
			211,
			154,
			210,
			140,
			112,
			5,
			52,
			130,
			147,
			196,
			49,
			byte.MaxValue,
			189,
			51,
			246,
			188,
			166,
			13,
			199,
			25,
			94,
			162,
			188,
			197,
			109,
			32,
			11,
			175,
			109,
			6,
			208,
			156,
			65,
			219,
			141,
			233,
			199,
			32,
			21,
			76,
			164,
			131,
			43,
			105,
			192,
			140,
			105,
			205,
			59,
			7,
			58,
			0,
			99,
			96,
			47,
			70,
			45,
			51,
			128,
			97,
			165,
			234,
			108,
			145,
			92,
			213,
			98,
			53,
			121,
			195,
			235,
			100,
			206,
			68,
			239,
			88,
			109,
			20,
			186,
			170,
			136,
			52,
			1,
			155,
			62,
			235,
			238,
			211,
			121,
			0,
			1,
			0,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000402 RID: 1026
		private static readonly byte[] byte_3 = new byte[]
		{
			0,
			1,
			0,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			82,
			111,
			111,
			116,
			45,
			67,
			65,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			49,
			45,
			88,
			83,
			48,
			48,
			48,
			48,
			48,
			48,
			48,
			51,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			84,
			104,
			101,
			77,
			111,
			115,
			116,
			65,
			119,
			101,
			115,
			111,
			109,
			101,
			115,
			116,
			0,
			0,
			35,
			219,
			68,
			36,
			208,
			51,
			236,
			0,
			0,
			0,
			0,
			0,
			1,
			0,
			1,
			79,
			72,
			66,
			67,
			byte.MaxValue,
			byte.MaxValue,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			26,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			byte.MaxValue,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0
		};

		// Token: 0x04000403 RID: 1027
		private byte byte_4;

		// Token: 0x04000404 RID: 1028
		private uint uint_0;

		// Token: 0x04000405 RID: 1029
		private byte[] byte_5 = new byte[16];

		// Token: 0x04000406 RID: 1030
		private uint uint_1;

		// Token: 0x04000407 RID: 1031
		private byte[] byte_6 = new byte[16];

		// Token: 0x04000408 RID: 1032
		private byte[] byte_7 = new byte[64];

		// Token: 0x04000409 RID: 1033
		private byte[] byte_8 = new byte[0];

		// Token: 0x0400040A RID: 1034
		private byte byte_9;

		// Token: 0x0400040B RID: 1035
		private byte[] byte_10 = new byte[60];

		// Token: 0x0400040C RID: 1036
		private byte byte_11;

		// Token: 0x0400040D RID: 1037
		private ushort ushort_1;

		// Token: 0x0400040E RID: 1038
		private byte[] byte_12 = new byte[88];

		// Token: 0x0400040F RID: 1039
		private bool bool_1;

		// Token: 0x04000410 RID: 1040
		private byte[] byte_13 = new byte[256];

		// Token: 0x04000411 RID: 1041
		private uint uint_2 = 65537u;

		// Token: 0x04000412 RID: 1042
		private uint uint_3;

		// Token: 0x04000413 RID: 1043
		private ulong ulong_1;

		// Token: 0x04000414 RID: 1044
		private byte[] byte_14 = new byte[63];

		// Token: 0x04000415 RID: 1045
		private byte byte_15;

		// Token: 0x04000416 RID: 1046
		private ushort ushort_2 = ushort.MaxValue;

		// Token: 0x04000417 RID: 1047
		private ulong ulong_2;

		// Token: 0x04000418 RID: 1048
		private byte[] byte_16 = new byte[48];

		// Token: 0x04000419 RID: 1049
		private byte[] byte_17 = new byte[32];

		// Token: 0x0400041A RID: 1050
		private bool bool_2;
	}
}
